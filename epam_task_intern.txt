В рамках данной задачи вы должны создать окружение и инфраструктуру для CI/CD, а также настроить pipeline для сборки и деплоя простого web-приложения.

Задача:
+ 1.	Форкнуть GitHub репозиторий (web-приложение) по адресу https://github.com/merovigen/student-exam2 в личный GitHub репозиторий.

+ 2.	Ознакомиться с документацией к проекту и с кодом приложения. Разобраться как запускать тесты приложения и само приложение. Работающее приложение должно выводить страницу в браузере с калькулятором на JS и хостнеймом сервера, на котором оно запущено.

+ 3.	Написать Dockerfile для web-приложения. Образ, собранный из этого Dockerfile, должен содержать все файлы/утилиты/библиотеки, необходимые для работы web-приложения, а также само приложение. При запуске контейнера на основе данного образа, должно запускаться web-приложение внутри контейнера с экспортированным на host-машину портом, то есть команда `curl 127.0.0.1:[PORT]`, выполненная с host-машины (centos) должна возвращать такой же результат, как и в п.2.

+ 4.	Запустить и выполнить первоначальную настройку Jenkins, работающего внутри docker-контейнера. Для выполнения данного пункта можно воспользоваться официальным docker образом Jenkins.

+ 5.	Создать пользователей admin и developer, включить matrix access и настроить права доступа: 
		admin – полные права на все
		developer:
		i.	Overall: read
		ii.	Job: build, cancel, discover, read, workspace
		iii.	Agent: build 

+ 6.	Установить плагин Ansible и настроить в Global Tool Configuration путь до директории с ansible который установлен на агенте (подробнее в п.7).

+ 7.	Для сборки и тестирования web-приложения нужно использовать не Jenkins-мастер, установленный и настроенный ранее, а специальный Jenkins-агент, работающий в отдельном docker-контейнере. Для начала нужно подготовить образ этого агента. Для этого требуется написать Dockerfile для Jenkins-агента. В образе должны присутствовать: java8, ansible, python3, пользователь Jenkins и SSH-ключ для авторизации Jenkins-мастера. Способ подключения агента – SSH

+ 8.	Зарегистрировать аккаунт на https://hub.docker.com/ и создать приватный репозиторий, в котором должны храниться созданные в п.3 и п.7 образы.

+ 9.	Добавить Jenkins credentials (SSH Username with private key) для авторизации на агенте.

+ 10.	Запустить контейнер для Jenkins агента и подключить агента к мастеру Jenkins.

+ 11.	Запретить сборки на мастере Jenkins (настроить число executors на мастере равным 0)

+ 12.	Создать Jenkins pipeline для CI:
		Jenkinsfile должен браться из репозитория с web-приложением
		Jenkins должен запускать job для каждого нового коммита в master ветку – для этого нужно включить триггер на SCM Poll и поставить ежеминутную проверку
		В Jenkinsfile должно быть:
		i.	Запускаться python тесты
		ii.	Билдится docker image
		iii.	Аутентификация в docker hub (docker login, логин и пароль браться должны из credentials Jenkins’а
		iv.	Выгрузка image на docker hub (docker push)

+ 13.	Создать Git репозиторий с Ansible. Добавить в него список используемых серверов в inventory, роль для установки вашего web-приложение и роль для установки балансировщика на базе Nginx.

+ 14.	Роль для web-приложения должна устанавливать docker, скачивать образ web-приложения и запускать контейнер на определенном порту.

+ 15.	Роль для Nginx должна устанавливать docker, скачивать образ Nginx, генерировать конфигурационный файл Nginx из Jinja2 шаблона для балансировки ваших web-приложений.

+ 16.	В результате работы Ansible у вас должны задеплоиться в разных контейнерах балансировщик и 3 web-приложения к нему для балансировки на разных портах.

17.	* Вынести роль для установки docker в отдельную роль и переиспользовать её в других ролях.
l
18.	* Вынести роли в отдельные репозитории и скачивать их через ansible-galaxy.

+ 19.	* Создать новую docker сеть и поместить в нее балансировщик и приложения.

+ 20.	Создать Jenkins pipeline для CD:
		Jenkinsfile должен браться из репозитория с ansible
		В Jenkinsfile должно быть
		Запуск плейбука ansible для деплоя
		Запуск интеграционных тестов (достаточно обычного http реквеста до web сервера и проверка что он возвращает статус 200)
+ 21.	Проверить работоспособность pipeline для CI и CD.
+ 22.	Проверить работоспособность приложения и балансировщика.

Дополнительное задание:

Вот дополнительное задание. Оно почти не пересекается с тем, что мы давали на курсе и подразумевает, что вы сможете сами разобраться в указанных технологиях. Формат подготови и сдачи будет аналогичный экзамену.
 
Задание:
1.	Создать репозиторий с Docker compose со следующими основными компонентами: Elasticsearch, Elastic Beats, Kibana, Kafka (можно в single моде).
2.	Создать Kafka топик, который будет использоваться для передачи сообщений.
3.	На каком-либо сервере с помощью elastic filebeat должны собираться системные логи и отправляться в подготовленный топик Kafka.
4.	Другой elastic beat должен читать сообщения из Kafka и отправлять их в Elasticsearch.
5.	Kibana должна быть подключена к Elasticsearch.
6.	В Kibana должен быть dashboard, на котором видно колличество системных сервисов, а также количество перезапусков сервисов за последние двое суток (на базе системных логов, собираемых с сервера).
 
PS. Kafka, Elastic это достаточно объемные темы для изучения. Старайтесь не закапываться в глубины, так как в противном случае велики риски не успеть. Тем не менее общее понимание архитектуры и принципов работы должно быть.


